skip_commits:
  files:
    - "**/*.md"

install:
- ps: Install-Module Pester -Force

build: off

test_script:
- ps: |
      <#
        .SYNOPSIS
         AppVeyor tests script.
      #>
      [OutputType()]
      param ()

      If (Test-Path -Path "env:APPVEYOR_BUILD_FOLDER") {
          # AppVeyor Testing
          $projectRoot = Resolve-Path -Path $env:APPVEYOR_BUILD_FOLDER
          $module = $env:Module
      }
      Else {
          # Local Testing 
          $projectRoot = Resolve-Path -Path (((Get-Item (Split-Path -Parent -Path $MyInvocation.MyCommand.Definition)).Parent).FullName)
          $module = Split-Path -Path $projectRoot -Leaf
      }

      # $moduleParent = Join-Path -Path $projectRoot -ChildPath $source
      # $manifestPath = Join-Path -Path $moduleParent -ChildPath "$module.psd1"
      # $modulePath = Join-Path -Path $moduleParent -ChildPath "$module.psm1"
      $ProgressPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue
      $WarningPreference = [System.Management.Automation.ActionPreference]::SilentlyContinue

      If (Get-Variable -Name "projectRoot" -ErrorAction "SilentlyContinue") {

          # Configure the test environment
          $testsPath = $projectRoot
          $testOutput = Join-Path -Path $projectRoot -ChildPath "TestsResults.xml"
          $testConfig = [PesterConfiguration]@{
              Run        = @{
                  Path     = $testsPath
                  PassThru = $True
              }
              TestResult = @{
                  OutputFormat = "NUnitXml"
                  OutputFile   = $testOutput
              }
              Output     = @{
                  Verbosity = "Detailed"
              }
          }
          Write-Host "Tests path:      $testsPath."
          Write-Host "Output path:     $testOutput."

          # Invoke Pester tests
          $res = Invoke-Pester -Configuration $testConfig

          # Upload test results to AppVeyor
          If ($res.FailedCount -gt 0) { Throw "$($res.FailedCount) tests failed." }
          If (Test-Path -Path env:APPVEYOR_JOB_ID) {
              (New-Object -TypeName "System.Net.WebClient").UploadFile("https://ci.appveyor.com/api/testresults/nunit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path -Path $testOutput))
          }
          Else {
              Write-Warning -Message "Cannot find: APPVEYOR_JOB_ID"
          }
      }
      Else {
          Write-Warning -Message "Required variable does not exist: projectRoot."
      }

      # Line break for readability in AppVeyor console
      Write-Host ""
